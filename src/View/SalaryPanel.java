/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View;

import Controller.Service;
import Controller.SharedData;
import Model.Employee;
import Model.RoleType;
import Model.Salary;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DELL
 */
public class SalaryPanel extends javax.swing.JPanel {

    /**
     * Creates new form AnalysisPanel
     */
    DefaultTableModel model;
    int cinema_id;

    public SalaryPanel() {
        initComponents();
        // Get the singleton instance
        SharedData sharedData = SharedData.getInstance();

        // Retrieve and print the data
        cinema_id = sharedData.getCinema_id();
        model = (DefaultTableModel) salaryTable.getModel();

        try {
            getAllSalaryAction();
        } catch (Exception e) {
        }

        // Create a custom cell renderer to left align text
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.LEFT);

        for (int i = 0; i < salaryTable.getColumnCount(); i++) {
            salaryTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        typeBox = new javax.swing.JComboBox<>();
        searchField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        salaryTable = new javax.swing.JTable();

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Salary");

        typeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Role" }));
        typeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeBoxActionPerformed(evt);
            }
        });

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        jLabel8.setText("Type :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(60, 60, 60)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 298, Short.MAX_VALUE)
                .addComponent(deleteBtn)
                .addGap(18, 18, 18)
                .addComponent(updateBtn)
                .addGap(18, 18, 18)
                .addComponent(refreshBtn)
                .addGap(25, 25, 25))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(typeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(deleteBtn)
                    .addComponent(updateBtn)
                    .addComponent(refreshBtn)
                    .addComponent(jLabel8))
                .addGap(25, 25, 25))
        );

        salaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Role", "Salary", "Bonus", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        salaryTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(salaryTable);
        if (salaryTable.getColumnModel().getColumnCount() > 0) {
            salaryTable.getColumnModel().getColumn(0).setMinWidth(60);
            salaryTable.getColumnModel().getColumn(0).setPreferredWidth(60);
            salaryTable.getColumnModel().getColumn(0).setMaxWidth(60);
            salaryTable.getColumnModel().getColumn(3).setMinWidth(120);
            salaryTable.getColumnModel().getColumn(3).setPreferredWidth(120);
            salaryTable.getColumnModel().getColumn(3).setMaxWidth(120);
            salaryTable.getColumnModel().getColumn(4).setMinWidth(120);
            salaryTable.getColumnModel().getColumn(4).setPreferredWidth(120);
            salaryTable.getColumnModel().getColumn(4).setMaxWidth(120);
            salaryTable.getColumnModel().getColumn(5).setMinWidth(120);
            salaryTable.getColumnModel().getColumn(5).setPreferredWidth(120);
            salaryTable.getColumnModel().getColumn(5).setMaxWidth(120);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1130, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void typeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeBoxActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        updateSalaryAction();
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        deleteSalaryAction();
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        search();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        // TODO add your handling code here:
        getAllSalaryAction();
    }//GEN-LAST:event_refreshBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JTable salaryTable;
    private javax.swing.JTextField searchField;
    private javax.swing.JComboBox<String> typeBox;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables

    public void getAllSalaryAction() {
        try {
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }

            for (Salary salary : new Service().getSalaryStub().getAllSalary(cinema_id)) {
                Employee employee = new Service().getEmployeeStub().getEmployee(salary.getEmployee_id());
                RoleType roleType = new Service().getRoleTypeStub().getRoleType(employee.getRole_id());
                model.addRow(new Object[]{salary.getId(), employee.getName(), roleType.getRole_type(), salary.getSalary(), salary.getBonus(), salary.getDate()});
            }
        } catch (RemoteException e) {
        }
    }

    private void updateSalaryAction() {
        try {
            int selectedRow = salaryTable.getSelectedRow();
            System.out.println("Selected Row => " + selectedRow);
            if (selectedRow != -1) {
                // Get data from the selected row
                Salary salary = new Salary();
                salary.setId((int) salaryTable.getValueAt(selectedRow, 0));
                salary.setSalary((double) salaryTable.getValueAt(selectedRow, 1));
                salary.setBonus((double) salaryTable.getValueAt(selectedRow, 2));
                salary.setDate(salaryTable.getValueAt(selectedRow, 3).toString());
                new Service().getSalaryStub().updateSalary(salary);
                logMessage("Updated Successful!");
                getAllSalaryAction();

            } else {
                // No row selected
                logMessage("Selected!");
            }
        } catch (RemoteException e) {
        }
    }

    private void deleteSalaryAction() {
        try {
            int selectedRow = salaryTable.getSelectedRow();
            if (selectedRow != -1) {
                // Get data from the selected row
                new Service().getSalaryStub().deleteSalary((int) salaryTable.getValueAt(selectedRow, 0));
                logMessage("Deleted Successful!");
                getAllSalaryAction();
            } else {
                // No row selected
                logMessage("Selected!");
            }
        } catch (RemoteException e) {
        }
    }

    private void search() {
        try {
            List<Employee> list = new ArrayList<>();
            String type = typeBox.getItemAt(typeBox.getSelectedIndex());
            for (Employee employee : new Service().getEmployeeStub().getAllEmployee(cinema_id)) {
                if (cinema_id == employee.getCinema_id()) {
                    switch (type) {
                        case "Name":
                            if (employee.getName().toLowerCase().contains(searchField.getText().toLowerCase())) {
                                list.add(employee);
                            }
                            break;
                        case "Role":
                            List<RoleType> roleTypeList = new ArrayList<>();
                            for (RoleType roleType : new Service().getRoleTypeStub().getAllRoleType()) {
                                if (roleType.getRole_type().toLowerCase().contains(searchField.getText().toLowerCase())) {
                                    roleTypeList.add(roleType);
                                }
                            }
                            for (RoleType roleType : roleTypeList) {
                                if (roleType.getId() == employee.getRole_id()) {
                                    list.add(employee);
                                }
                            }

                            break;

                    }
                }

            }
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }

            for (Employee employee : list) {
                for (Salary salary : new Service().getSalaryStub().getAllSalary(cinema_id)) {
                    if (salary.getEmployee_id() == employee.getId()) {
                        RoleType roleType = new Service().getRoleTypeStub().getRoleType(employee.getRole_id());
                        model.addRow(new Object[]{salary.getId(), employee.getName(), roleType.getRole_type(), salary.getSalary(), salary.getBonus(), salary.getDate()});

                    }
                }

            }
        } catch (RemoteException e) {
        }
    }

    public void logMessage(String log) {
        JOptionPane.showMessageDialog(null, log, "", JOptionPane.INFORMATION_MESSAGE);
    }
}
