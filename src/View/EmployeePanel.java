/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View;

import Controller.ObjectCheck;
import Controller.Service;
import Model.Employee;
import Model.RoleType;
import Controller.SharedData;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DELL
 */
public class EmployeePanel extends javax.swing.JPanel {

    /**
     * Creates new form AnalysisPanel
     */
    DefaultTableModel model;
    int cinema_id, role_id;

    public EmployeePanel() {
        initComponents();

        // Get the singleton instance
        SharedData sharedData = SharedData.getInstance();

        // Retrieve and print the data
        cinema_id = sharedData.getCinema_id();

        model = (DefaultTableModel) employeeTable.getModel();
        try {
            for (RoleType roletype : new Service().getRoleTypeStub().getAllRoleType()) {
                roleTypeBox.addItem(roletype.getRole_type());
            }
        } catch (RemoteException e) {
        }
        try {
            getAllEmployeeAction();
            roleSelected();
        } catch (Exception e) {
        }

        roleTypeBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {

                roleSelected();
            }

        });

        // Create a custom cell renderer to left align text
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.LEFT);

        for (int i = 0; i < employeeTable.getColumnCount(); i++) {
            employeeTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        typeBox = new javax.swing.JComboBox<>();
        searchField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        jpanel = new javax.swing.JPanel();
        insertBtn = new javax.swing.JButton();
        nameField = new javax.swing.JTextField();
        nrcField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cancelBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        roleTypeBox = new javax.swing.JComboBox<>();
        phoneField = new javax.swing.JTextField();
        addressField = new javax.swing.JTextField();
        salaryField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        noteArea = new javax.swing.JTextArea();
        passwordField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Employee");

        typeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Role", "NRC", "Phone" }));
        typeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeBoxActionPerformed(evt);
            }
        });

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Type :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(60, 60, 60)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deleteBtn)
                .addGap(18, 18, 18)
                .addComponent(updateBtn)
                .addGap(18, 18, 18)
                .addComponent(refreshBtn)
                .addGap(25, 25, 25))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(typeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(deleteBtn)
                    .addComponent(updateBtn)
                    .addComponent(refreshBtn)
                    .addComponent(jLabel2))
                .addGap(25, 25, 25))
        );

        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Password", "RoleID", "Role", "NRC", "Address", "Phone", "Salary", "Note"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        employeeTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        employeeTable.setPreferredSize(new java.awt.Dimension(452, 402));
        jScrollPane1.setViewportView(employeeTable);
        if (employeeTable.getColumnModel().getColumnCount() > 0) {
            employeeTable.getColumnModel().getColumn(0).setMinWidth(60);
            employeeTable.getColumnModel().getColumn(0).setPreferredWidth(60);
            employeeTable.getColumnModel().getColumn(0).setMaxWidth(60);
            employeeTable.getColumnModel().getColumn(1).setMinWidth(80);
            employeeTable.getColumnModel().getColumn(1).setPreferredWidth(80);
            employeeTable.getColumnModel().getColumn(1).setMaxWidth(80);
            employeeTable.getColumnModel().getColumn(2).setMinWidth(80);
            employeeTable.getColumnModel().getColumn(2).setPreferredWidth(80);
            employeeTable.getColumnModel().getColumn(2).setMaxWidth(80);
            employeeTable.getColumnModel().getColumn(3).setMinWidth(60);
            employeeTable.getColumnModel().getColumn(3).setPreferredWidth(60);
            employeeTable.getColumnModel().getColumn(3).setMaxWidth(60);
            employeeTable.getColumnModel().getColumn(5).setMinWidth(100);
            employeeTable.getColumnModel().getColumn(5).setPreferredWidth(100);
            employeeTable.getColumnModel().getColumn(5).setMaxWidth(100);
            employeeTable.getColumnModel().getColumn(7).setMinWidth(80);
            employeeTable.getColumnModel().getColumn(7).setPreferredWidth(80);
            employeeTable.getColumnModel().getColumn(7).setMaxWidth(80);
            employeeTable.getColumnModel().getColumn(8).setMinWidth(80);
            employeeTable.getColumnModel().getColumn(8).setPreferredWidth(80);
            employeeTable.getColumnModel().getColumn(8).setMaxWidth(80);
        }

        jpanel.setBackground(new java.awt.Color(204, 204, 204));

        insertBtn.setText("Insert");
        insertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertBtnActionPerformed(evt);
            }
        });

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        nrcField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nrcFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Name");

        jLabel4.setText("NRC");

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Address");

        jLabel6.setText("Phone");

        jLabel7.setText("Salary");

        jLabel9.setText("Note");

        jLabel10.setText("Role Type");

        phoneField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneFieldActionPerformed(evt);
            }
        });

        addressField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressFieldActionPerformed(evt);
            }
        });

        salaryField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salaryFieldActionPerformed(evt);
            }
        });

        noteArea.setColumns(20);
        noteArea.setRows(5);
        jScrollPane2.setViewportView(noteArea);

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        jLabel12.setText("Password");

        jButton2.setText("Payment");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpanelLayout = new javax.swing.GroupLayout(jpanel);
        jpanel.setLayout(jpanelLayout);
        jpanelLayout.setHorizontalGroup(
            jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanelLayout.createSequentialGroup()
                        .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpanelLayout.createSequentialGroup()
                                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)
                                .addComponent(salaryField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpanelLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(260, 260, 260)
                                .addComponent(jLabel4))
                            .addGroup(jpanelLayout.createSequentialGroup()
                                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)
                                .addComponent(nrcField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5)
                            .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jpanelLayout.createSequentialGroup()
                                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(roleTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addGap(100, 100, 100)
                                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(insertBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                            .addComponent(cancelBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(278, 278, 278)
                        .addComponent(jLabel7)
                        .addGap(219, 219, 219)
                        .addComponent(jLabel9)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jpanelLayout.setVerticalGroup(
            jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9))
                .addGap(4, 4, 4)
                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jpanelLayout.createSequentialGroup()
                        .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(salaryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel4))
                        .addGap(4, 4, 4)
                        .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nrcField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpanelLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel10))
                            .addGroup(jpanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(roleTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addComponent(jLabel5)
                        .addGap(14, 14, 14)
                        .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpanelLayout.createSequentialGroup()
                        .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(insertBtn)
                            .addComponent(jButton2))
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn))
                    .addComponent(jScrollPane2))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addComponent(jpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void typeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeBoxActionPerformed

    private void insertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertBtnActionPerformed
        // TODO add your handling code here:
        addEmployeeAction();
    }//GEN-LAST:event_insertBtnActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void nrcFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nrcFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nrcFieldActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // TODO add your handling code here:
        cancel();

    }//GEN-LAST:event_cancelBtnActionPerformed

    private void phoneFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneFieldActionPerformed

    private void addressFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressFieldActionPerformed

    private void salaryFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salaryFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salaryFieldActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        updateEmployeeAction();
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        deleteEmployeeAction();
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        search();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        // TODO add your handling code here:
        getAllEmployeeAction();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        addPaymentAction();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void addPaymentAction() {
        int selectedRow = employeeTable.getSelectedRow();
        System.out.println("Selected Row => " + selectedRow);
        if (selectedRow != -1) {
            // Get data from the selected row
            Employee employee = new Employee();
            employee.setCinema_id(cinema_id);
            employee.setId((int) employeeTable.getValueAt(selectedRow, 0));
            employee.setName(employeeTable.getValueAt(selectedRow, 1).toString());
            employee.setPassword(employeeTable.getValueAt(selectedRow, 2).toString());
            employee.setRole_id((int) employeeTable.getValueAt(selectedRow, 3));
            employee.setNrc(employeeTable.getValueAt(selectedRow, 5).toString());
            employee.setAddress(employeeTable.getValueAt(selectedRow, 6).toString());
            employee.setPhone(employeeTable.getValueAt(selectedRow, 7).toString());
            employee.setSalary((double) employeeTable.getValueAt(selectedRow, 8));
            employee.setNote(employeeTable.getValueAt(selectedRow, 9).toString());

            // Create and configure the JDialog
            JDialog dialog = new JDialog((JFrame) null, "", true);
            dialog.setSize(430, 380);
            dialog.setLocationRelativeTo(null); // Center the dialog

            dialog.getContentPane().add(new PaymentDialog(dialog, employee));

            // Set up custom close behavior
            dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);

            // Show the JDialog
            dialog.setVisible(true);
        } else {
            // No row selected
            logMessage("Selected!");
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressField;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTable employeeTable;
    private javax.swing.JButton insertBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel jpanel;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextArea noteArea;
    private javax.swing.JTextField nrcField;
    private javax.swing.JTextField passwordField;
    private javax.swing.JTextField phoneField;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JComboBox<String> roleTypeBox;
    private javax.swing.JTextField salaryField;
    private javax.swing.JTextField searchField;
    private javax.swing.JComboBox<String> typeBox;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables

    public void addEmployeeAction() {
        try {
            double salary = 0;
            if (!salaryField.getText().isEmpty()) {
                salary = Double.parseDouble(salaryField.getText());
            }
            Employee employee = new Employee();
            employee.setCinema_id(cinema_id);
            employee.setName(nameField.getText());
            employee.setPassword(passwordField.getText());
            employee.setRole_id(role_id);
            employee.setNrc(nrcField.getText());
            employee.setAddress(addressField.getText());
            employee.setPhone(phoneField.getText());
            employee.setSalary(salary);
            employee.setNote(noteArea.getText());

            if (new ObjectCheck().isNullObject(employee)) {
                logMessage("Fill Data!");
            } else {
                int n = new Service().getEmployeeStub().addEmployee(employee);
                if (n == 1) {
                    logMessage("Added Successful!");
                    cancel();
                    getAllEmployeeAction();
                } else {
                    logMessage("Error!");
                }
            }
        } catch (RemoteException e) {
        }
    }

    public void cancel() {
        nameField.setText("");
        passwordField.setText("");
        nrcField.setText("");
        addressField.setText("");
        phoneField.setText("");
        salaryField.setText("");
        noteArea.setText("");
    }

    public void getAllEmployeeAction() {
        try {
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            for (Employee employee : new Service().getEmployeeStub().getAllEmployee(cinema_id)) {
                RoleType roleType = new Service().getRoleTypeStub().getRoleType(employee.getRole_id());
                String role = roleType.getRole_type();
                model.addRow(new Object[]{employee.getId(), employee.getName(), employee.getPassword(), employee.getRole_id(), role, employee.getNrc(), employee.getAddress(), employee.getPhone(),
                    employee.getSalary(), employee.getNote()});
            }
        } catch (RemoteException e) {
        }
    }

    private void updateEmployeeAction() {
        try {
            int selectedRow = employeeTable.getSelectedRow();
            System.out.println("Selected Row => " + selectedRow);
            if (selectedRow != -1) {
                // Get data from the selected row
                Employee employee = new Employee();
                employee.setCinema_id(cinema_id);
                employee.setId((int) employeeTable.getValueAt(selectedRow, 0));
                employee.setName(employeeTable.getValueAt(selectedRow, 1).toString());
                employee.setPassword(employeeTable.getValueAt(selectedRow, 2).toString());
                employee.setRole_id((int) employeeTable.getValueAt(selectedRow, 3));
                employee.setNrc(employeeTable.getValueAt(selectedRow, 5).toString());
                employee.setAddress(employeeTable.getValueAt(selectedRow, 6).toString());
                employee.setPhone(employeeTable.getValueAt(selectedRow, 7).toString());
                employee.setSalary((double) employeeTable.getValueAt(selectedRow, 8));
                employee.setNote(employeeTable.getValueAt(selectedRow, 9).toString());
                new Service().getEmployeeStub().updateEmployee(employee);
                logMessage("Updated Successful!");
                getAllEmployeeAction();
            } else {
                // No row selected
                logMessage("Selected!");
            }
        } catch (RemoteException e) {
        }
    }

    private void deleteEmployeeAction() {
        try {
            int selectedRow = employeeTable.getSelectedRow();
            if (selectedRow != -1) {
                // Get data from the selected row
                new Service().getEmployeeStub().deleteEmployee((int) employeeTable.getValueAt(selectedRow, 0));
                logMessage("Deleted Successful!");
                getAllEmployeeAction();
            } else {
                // No row selected
                logMessage("Selected!");
            }
        } catch (RemoteException e) {
        }
    }

    private void search() {
        try {
            List<Employee> list = new ArrayList<>();
            String type = typeBox.getItemAt(typeBox.getSelectedIndex());
            for (Employee employee : new Service().getEmployeeStub().getAllEmployee(cinema_id)) {
                if (cinema_id == employee.getCinema_id()) {
                    switch (type) {
                        case "Name":
                            if (employee.getName().toLowerCase().contains(searchField.getText().toLowerCase())) {
                                list.add(employee);
                            }
                            break;
                        case "Role":
                            List<RoleType> roleTypeList = new ArrayList<>();
                            for (RoleType roleType : new Service().getRoleTypeStub().getAllRoleType()) {
                                if (roleType.getRole_type().toLowerCase().contains(searchField.getText().toLowerCase())) {
                                    roleTypeList.add(roleType);
                                }
                            }
                            for (RoleType roleType : roleTypeList) {
                                if (roleType.getId() == employee.getRole_id()) {
                                    list.add(employee);
                                }
                            }

                            break;
                        case "NRC":
                            if (employee.getNrc().toLowerCase().contains(searchField.getText().toLowerCase())) {
                                list.add(employee);
                            }
                            break;
                        case "Address":
                            if (employee.getAddress().toLowerCase().contains(searchField.getText().toLowerCase())) {
                                list.add(employee);
                            }
                            break;
                        case "Phone":
                            if (employee.getPhone().toLowerCase().contains(searchField.getText().toLowerCase())) {
                                list.add(employee);
                            }

                            break;

                    }
                }

            }
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            for (Employee employee : list) {
                RoleType roleType = new Service().getRoleTypeStub().getRoleType(employee.getRole_id());
                model.addRow(new Object[]{employee.getId(), employee.getName(), employee.getPassword(), employee.getRole_id(), roleType.getRole_type(), employee.getNrc(), employee.getAddress(), employee.getPhone(),
                    employee.getSalary(), employee.getNote()});
            }
        } catch (RemoteException e) {
        }
    }

    public void logMessage(String log) {
        JOptionPane.showMessageDialog(null, log, "", JOptionPane.INFORMATION_MESSAGE);
    }

    public void roleSelected() {
        try {
            List<RoleType> list = new Service().getRoleTypeStub().getAllRoleType();
            for (RoleType roleType : list) {
                if (roleType.getRole_type().equals(roleTypeBox.getSelectedItem())) {
                    role_id = roleType.getId();
                    salaryField.setText(roleType.getSalary() + "");
                    break;
                }
            }

        } catch (RemoteException e) {
        }
    }
}
